/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.sg9.hicto.api;

import com.sg9.hicto.api.model.EventDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "Hicto", description = "the Hicto API")
public interface HictoApi {

    /**
     * POST /api/v1/event
     *
     * @return Success (status code 200)
     */
    @ApiOperation(value = "", nickname = "createEvent", notes = "", response = EventDto.class, responseContainer = "List", tags={ "Hicto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EventDto.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/event",
        produces = { "application/json" }
    )
    ResponseEntity<List<EventDto>> createEvent();


    /**
     * DELETE /api/v1/event/{event_id}
     *
     * @param eventId  (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "", nickname = "deleteEvent", notes = "", response = EventDto.class, responseContainer = "List", tags={ "Hicto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EventDto.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/event/{event_id}",
        produces = { "application/json" }
    )
    ResponseEntity<List<EventDto>> deleteEvent(@ApiParam(value = "", required = true) @PathVariable("event_id") Long eventId);


    /**
     * GET /api/v1/event/{event_id}
     *
     * @param eventId  (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "", nickname = "getEvent", notes = "", response = EventDto.class, responseContainer = "List", tags={ "Hicto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EventDto.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/event/{event_id}",
        produces = { "application/json" }
    )
    ResponseEntity<List<EventDto>> getEvent(@ApiParam(value = "", required = true) @PathVariable("event_id") Long eventId);


    /**
     * PUT /api/v1/event/{event_id}
     *
     * @param eventId  (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "", nickname = "updateEvent", notes = "", response = EventDto.class, responseContainer = "List", tags={ "Hicto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EventDto.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/event/{event_id}",
        produces = { "application/json" }
    )
    ResponseEntity<List<EventDto>> updateEvent(@ApiParam(value = "", required = true) @PathVariable("event_id") Long eventId);

}
